package moon.common.util;import java.util.regex.Pattern;public class PasswordChecker {			private static Pattern patPlan1 = Pattern.compile("[a-zA-Z].*");	private static Pattern patSubPlan1 = Pattern.compile(".*[a-z].*");	private static Pattern patSubPlan2 = Pattern.compile(".*[A-Z].*");	private static Pattern patSubPlan3 = Pattern.compile(".*[0-9].*");		public static int checkValidatePassword(String sNewPassword) {				int nReturn = 0; // 		int specialwordcount;		int passwordsize = sNewPassword.length();		boolean start_eng = patPlan1.matcher(sNewPassword).matches();		boolean small_word = patSubPlan1.matcher(sNewPassword).matches();		boolean big_word = patSubPlan2.matcher(sNewPassword).matches();		boolean num_word = patSubPlan3.matcher(sNewPassword).matches();				specialwordcount = checkValidationSpecialWord(sNewPassword); 				/*		 * 허용 특수문자 조건 삭제 및 첫글자 영문일 조건 삭제 됨_151230_YSH		 // 허용 가능한 특수문자와 허용가능하지 않은특수문자 비교합이 입력한 값과 같은지. 		 // return 값이 13이면 값이 달라 허용하지 않은 특수문자가 포함되어 있는것이다.		 // 13 이외의 값이 들어왔다면 성공이다 .		if(checkValidationSpecialWordDetail(sNewPassword,specialwordcount)==13){ 			return 13; 		}				if(!start_eng) {			return 11;// 비밀번호 첫 글자는 영문으로 시작해야 합니다.		} 		*/ 						// 요구사항 2번. (영문대문자/영문소문자/숫자/조합하여 8자리 이상		// 1. 특수문자가 있는지 검사 2. 영문소문자,숫자 조합인가검사 3. 글자 갯수 검사.		if(specialwordcount == 0){            // 영문대문자+영문소문자+숫자 조합시             if(big_word && small_word && num_word){                if(passwordsize <= 8)                    return 14; // 영문소문자 대문자 숫자 조합시 비밀번호는 9자리 이상입니다.                 else if(passwordsize >= 20)                    return 17; // 20자제한.                else                    return 0;            }            // 요구사항 3번 영문+숫자 조합하여 14자리 이상            if( (small_word || big_word) && num_word ){                if(passwordsize <= 13)                    return 15; // 영문+숫자 조합시 14자리 이상으로 해주세요.                 else if(passwordsize >= 20)                    return 17; // 패스워드 길이는 20자로                else                    return 0;            }            return 14;        }else{            if(specialwordcount >= 1 && (small_word || big_word)){                if(passwordsize <= 7)                    return 16; // 특수문자 포함시 문자+특수문자 8자리 이상 20자리이하 입니다.                else if(passwordsize >= 20)                    return 17;                else                    return 0;            }            return 16;    // ex)특수문자+숫자 구성 등        }	}		public static int checkValidationSpecialWord(String passwd){				Pattern patSubPlan4 = Pattern.compile(".*[\\!|\\~|\\@|\\$|\\^|\\*|\\(|\\)|\\_|\\{|\\}|\\[|\\]|\\+].*");				int wordcount=0;		int notpattern=0;		String temp;				for(int k=0; k < passwd.length() ; k++){			temp = 	passwd.substring(k, k+1);			if(patSubPlan4.matcher(temp).matches()){				wordcount++;			}			else{notpattern++;}		}		return wordcount;	}		public static int checkValidationSpecialWordDetail(String passwd,int wordcount){			int passwordsize = passwd.length();	int count=0;	String temp;			for(int i=0; i < passwd.length(); i++){			temp = 	passwd.substring(i, i+1);			if(patSubPlan1.matcher(temp).matches()){				count++;			}if(patSubPlan2.matcher(temp).matches()){				count++;			}if(patSubPlan3.matcher(temp).matches()){				count++;			}		}		if( passwordsize == count+wordcount){		//System.out.println("특수문자 성공.. ");		return wordcount;	}else{		//System.out.println("특수문자 실패.. ");		return 13; 	}		}	public static void main(String a[]){				String pwd3 ="aa1234567890123";		System.out.println(" pwd input is : " + pwd3 );		System.out.println("pwd pattern is : " + PasswordChecker.checkValidatePassword(pwd3));	}		/* Return 규약 메세지 정리 	 * 0. 적합한 패스워드 . 성공.	 * 11. 실패 : 비밀번호 첫 글자는 영문으로 시작해야 합니다.	 * 12. 실패 : 비밀번호를 8자 이상 입력해 주세요.	 * 13. 실패 : 허용되지 않은 특수문자가 존재합니다. 입력가능한 특수문자는 	 *            !,~,@,$,^,*,(,),_,{,},[,] 입니다. 	 * 14. 실패 : 영문대문자 + 소문자 + 숫자 조합시 9자리 이상. 	 * 15. 실패 : 영문 + 숫자 조합시 14자리 이상으로 해주세요.   	 * 16. 실패 : 비밀번호는 특수문자 포함시 문자+특수문자+숫자 8자리 이상 20자리이하 입니다. 	 * 17. 실패 : 비밀번호는 최대 20자리 까지 입니다. */		}